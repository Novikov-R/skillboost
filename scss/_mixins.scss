@mixin media-breakpoint-up($breakpoint) {
    @if $breakpoint == sm {
        @media (min-width: $breakpoint-sm) {
            @content;
        }
    } @else if $breakpoint == md {
        @media (min-width: $breakpoint-md) {
            @content;
        }
    } @else if $breakpoint == lg {
        @media (min-width: $breakpoint-lg) {
            @content;
        }
    } @else if $breakpoint == xl {
        @media (min-width: $breakpoint-xl) {
            @content;
        }
    } @else if $breakpoint == xxl {
        @media (min-width: $breakpoint-xxl) {
            @content;
        }
    }
}

@mixin media-breakpoint-down($breakpoint) {
    @if $breakpoint == sm {
        @media (max-width: ($breakpoint-sm - 1)) {
            @content;
        }
    } @else if $breakpoint == md {
        @media (max-width: ($breakpoint-md - 1)) {
            @content;
        }
    } @else if $breakpoint == lg {
        @media (max-width: ($breakpoint-lg - 1)) {
            @content;
        }
    } @else if $breakpoint == xl {
        @media (max-width: ($breakpoint-xl - 1)) {
            @content;
        }
    } @else if $breakpoint == xxl {
        @media (max-width: ($breakpoint-xxl - 1)) {
            @content;
        }
    }
}

@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
    display: flex;
    flex-direction: $direction;
    justify-content: $justify;
    align-items: $align;
    flex-wrap: $wrap;
}

@mixin flex-center {
    display: flex;
    justify-content: center;
    align-items: center;
}

@mixin abs-center {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@mixin font($size, $weight: 400, $line-height: normal) {
    font-size: $size;
    font-weight: $weight;
    line-height: $line-height;
}

@mixin font-responsive($min-size, $max-size, $min-vw, $max-vw) {
    font-size: $min-size;

    @media (min-width: $min-vw) {
        font-size: calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
    }

    @media (min-width: $max-vw) {
        font-size: $max-size;
    }
}

@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;
}

@mixin button-reset {
    border: none;
    background: none;
    cursor: pointer;
    padding: 0;
    font-family: inherit;
    outline: none;

    &:focus {
        outline: none;
    }
}

@mixin button-primary {
    @include button-reset;
    background-color: $color-primary;
    color: $color-white;
    border-radius: $border-radius;
    padding: 12px 24px;
    font-size: $font-size-base;
    font-weight: 500;
    transition: background-color 0.3s, transform 0.2s;

    &:hover {
        background-color: darken($color-primary, 10%);
    }

    &:active {
        transform: translateY(2px);
    }
}

@mixin button-outline {
    @include button-reset;
    background-color: transparent;
    color: $color-primary;
    border: 2px solid $color-primary;
    border-radius: $border-radius;
    padding: 10px 24px;
    font-size: $font-size-base;
    font-weight: 500;
    transition: background-color 0.3s, color 0.3s, transform 0.2s;

    &:hover {
        background-color: $color-primary;
        color: $color-white;
    }

    &:active {
        transform: translateY(2px);
    }
}

@mixin card-shadow {
    box-shadow: $box-shadow;
    transition: box-shadow 0.3s;

    &:hover {
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
    }
}

@mixin transition($properties...) {
    $transitions: ();
    @each $property in $properties {
        $transitions: append($transitions, $property 0.3s ease, comma);
    }
    transition: $transitions;
}

@mixin text-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin line-clamp($lines) {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
} 